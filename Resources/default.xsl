<xsl:transform xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">	<xsl:output omit-xml-declaration="yes" indent="no" />	<xsl:template match="envelope">		<xsl:variable name="envelopeClasses">			<xsl:choose>				<xsl:when test="message/@highlight = 'yes' and message/@action = 'yes'">					<xsl:text>envelope highlight action</xsl:text>				</xsl:when>				<xsl:when test="message/@action = 'yes'">					<xsl:text>envelope action</xsl:text>				</xsl:when>				<xsl:when test="message/@highlight = 'yes'">					<xsl:text>envelope highlight</xsl:text>				</xsl:when>				<xsl:otherwise>					<xsl:text>envelope</xsl:text>				</xsl:otherwise>			</xsl:choose>		</xsl:variable>		<xsl:variable name="senderClasses">			<xsl:choose>				<xsl:when test="sender/@self = 'yes'">					<xsl:text>member self</xsl:text>				</xsl:when>				<xsl:otherwise>					<xsl:text>member</xsl:text>				</xsl:otherwise>			</xsl:choose>		</xsl:variable>		<div id="{@id}" class="{$envelopeClasses}">			<span class="{$senderClasses}"><xsl:value-of select="sender" /></span>			<span class="timestamp">				<xsl:call-template name="short-time">					<xsl:with-param name="date" select="@received" />				</xsl:call-template>			</span>			<span class="message"><xsl:copy-of select="message/child::node()" /></span> <!-- Use copy-of and child::node() to keep any HTML that is in the message, use value-of to strip HTML -->		</div>	</xsl:template>	<xsl:template match="event">		<div class="event">			<xsl:copy-of select="message/child::node()" />		</div>	</xsl:template>	<xsl:template name="short-time">		<xsl:param name="date" /> <!-- YYYY-MM-DD HH:MM:SS +/-HHMM -->		<xsl:choose>			<xsl:when test="number(substring($date, 12, 2)) &gt; 12">				<xsl:value-of select="number(substring($date, 12, 2)) - 12" />			</xsl:when>			<xsl:when test="number(substring($date, 12, 2)) = 0">				<xsl:text>12</xsl:text>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="number(substring($date, 12, 2))" />			</xsl:otherwise>		</xsl:choose>		<xsl:text>:</xsl:text>		<xsl:value-of select="substring($date, 15, 2)" />		<xsl:choose>			<xsl:when test="number(substring($date, 12, 2)) &gt;= 12">				<xsl:text>pm</xsl:text>			</xsl:when>			<xsl:otherwise>				<xsl:text>am</xsl:text>			</xsl:otherwise>		</xsl:choose>	</xsl:template></xsl:transform>